generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id                     String          @id @default(uuid())
  email                  String          @unique
  username               String
  password               String
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @default(now())
  Posts                  Post[]
  LikedPost              LikedPost[]
  SentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  ReceivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
}

model Post {
  id       String      @id @default(uuid())
  title    String
  content  String
  authorId String
  author   User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  LikedBy  LikedPost[]
}

model LikedPost {
  id     String @id @default(uuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model FriendRequest {
  id         String              @id @default(uuid())
  status     FriendRequestStatus @default(PENDING)
  senderId   String
  receiverId String
  sender     User                @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User                @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @default(now())
}
